
== Address ==
	- A class to hold the address object information
	- Parameters: 
		* city:String
		* country:String
		* town:String
		* street:String
	- Methods: 
		* toString: Returns a concatenated String of the address.
	- ToDo: 
		* Getters and Setters.
		* Comments
	
== Contact == 
	- A class to hold the Contact information
	- Parameters:
		* id:int
		* firstName:String
		* middleName:String
		* lastName:String
		* sex:int
		* status:int;
        * address:Address;
        * birthday:Date;
	- Methods:
		* Getters and Setters
		* toString:String
		* getAge():int
	-ToDo:
		* Comments


== FaceLockModel == 
	- A Class that define the abstract model for interacting with the database
	- Parameters:
		* DRIVER_NAME:String
		* SERVER:String
		* DATABASE_NAME:String
		* USERNAME:String
		* PASSWORD:String
		* JDBC_URL:String
		* connection:Connection
	- methods:
	- ToDo:
		* Setters And Getters
		
		
== ContactModel ==
	- A class to interact with the Contact Model in the database - extends FaceLockModel
	- Parameters: 
		* contact:Contact
		* changed:boolean
	- Methods:
		* findById(int id):ContactModel - Static Method
		* find(int id):ContactModel - Static Method
	- ToDo:
		- Methods
			* findByUsernameAndPassword(String username, String password):ContactModel - Static Method, returns NULL if not found!
			* getAllContacts():ArrayList - Returns all the contacts for the contact object
			* update():boolean  - Update the specific contact
			* delete():boolean - Delete the specific contact
			* insert(Contact c):Contact - Static Method - Returns the Contact after Creating it.
			* Setters And Getters


The server functions in general:

	- multi threaded.
	- Invoke a login function and a new user option, after the connection is done.
	- When login, the server checks for the entered password with the one at the database.
	- Send list of all contact for a specifc accout.
	- The resever receives messages which are: 
		1. Login, 
		2. Logout, 
		3. Create New User, 
		4. Add Contact, 
		5. Delete Contact
		6. Update Contact
		each with its own format, and the server will execute it.
		
		Execution is:
		Login : check entered info.
		Logout : close session.
		Create New User: the username and passowrd, save them to DB (Users table) by checking the 
						 matching of passwords and the availabilty of the username ( or if the username 
						 is a primary key, so there won't be a need for checking...) .
		Add Contact: get the message and add it to the DB ( add row in the Contact table in
					 relation to the requesting one).
		Delete Contact:  getting the ID and remove from DB from contacts of that requesting one.
		Update Contact:  save changes to DB ( the requesting Contact in the Contact table).
		
	- Give a unique id for each contact record. (why? for the login..? )