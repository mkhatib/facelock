
== Address == (NOT NEEDED ANY MORE!)
	- A class to hold the address object information
	- Parameters: 
		* city:String
		* country:String
		* town:String
		* street:String
	- Methods: 
		* toString: Returns a concatenated String of the address.
	- ToDo: 
		* Getters and Setters.
		* Comments
	
== Contact == 
	- A class to hold the Contact information
	- Parameters:
		* id:int
		* firstName:String
		* middleName:String
		* lastName:String
		* Phone:String
		* Address:String
        * Email:String
        * icon:int
	- Methods:
		* Getters and Setters
		* toString:String
	-ToDo:
	

== FaceLockModel == 
	- A Class that define the abstract model for interacting with the database
	- Parameters:
		* DRIVER_NAME:String
		* SERVER:String
		* DATABASE_NAME:String
		* USERNAME:String
		* PASSWORD:String
		* JDBC_URL:String
		* connection:Connection
	- methods:
	- ToDo:
		
		
== ContactModel ==
	- A class to interact with the Contact Model in the database - extends FaceLockModel
	- Parameters: 
		* contact:Contact
		* changed:boolean
		* newObject:boolean
		* userID:int
	- Methods:
		* findById(int id):ContactModel - Static Method
		* delete():boolean - if the ContactModel object is deleted successfully it will returns true
		* save():boolean - if the ContactModel object is saved successfully it will returns true
		* updated():boolean - if the ContactModel object is updated successfully it will returns true
		* Setters and getters
	- ToDo:
		
		
== User == 
	- A class to wrap up the user information 
	- Parameters:
		* username:String
		* password:String
		* id:int
	- Methods:
		* Setters and Getters
	- ToDo:


== UserModel ==
	- A class to interact with the User table in the database
	- Parameters:
		* user:User
		* changed:boolean
		* newObject:boolean
	- Methods:
		* findByUsernameAndPassword(String username, String password):UserModel
		* getAllContacts():ArrayList<Contact> (contacts() is an alias to this method)
		* addContact(Contact contact):boolean
		* deleteContact(int id):boolean
		* save():boolean - if the UserModel object is saved successfully it will returns true
		* update():boolean 
		* delete():boolean
		* Getters And Setters 
	- ToDo:
		* Methods:
			* findById():boolean




The server functions in general:

	- multi threaded.
	- Invoke a login function and a new user option, after the connection is done.
	- When login, the server checks for the entered password with the one at the database.
	- Send list of all contact for a specifc accout.
	- The resever receives messages which are: 
		1. Login, 
		2. Logout, 
		3. Create New User, 
		4. Add Contact, 
		5. Delete Contact
		6. Update Contact
		each with its own format, and the server will execute it.
		
		Execution is:
		Login : check entered info.
		Logout : close session.
		Create New User: the username and passowrd, save them to DB (Users table) by checking the 
						 matching of passwords and the availabilty of the username ( or if the username 
						 is a primary key, so there won't be a need for checking...) .
		Add Contact: get the message and add it to the DB ( add row in the Contact table in
					 relation to the requesting one).
		Delete Contact:  getting the ID and remove from DB from contacts of that requesting one.
		Update Contact:  save changes to DB ( the requesting Contact in the Contact table).
		
	- Give a unique id for each contact record. (why? for the login..? )
	
---------------------------------------------------------
---------------------------------------------------------
Client Side:
--> I prefer to have the begining window as msn which to have userName and Password text fields and logIn icon + to have an icon to creat new user account.
	- If we suppose that the DB is empty, i.e no one has an accout then:
			* function creatNewUserAccount(userName(10Byte), passWord(2 Byte)){ 
				//send that request to server.
				//server creats the account and return a message.
				}
				//This function as ActionListener to the createNewAccount button.
	- If group of accounts are already exist:
			* function logIn(username(10Byte),Password(tByte){
				//send the password with the random generated encrypion number to server.
				//the server return the contact window and the operation which he/she can do (Add,Update,Delete,LogOut)
			}
			//This function is ActionListener to the LogI button.
			
			*function add(){
				//open a new window (like data entry text fields) that enable the user to insert the information about the new contact.	
			}
			//This function is ActionListener for AddNewContact button.
			
			*function delete(){
				//open a new window wich has all the contacts with combo box for each and the ones selected will be sent as a request to server to delete them. 
				//return a message of fail or success.
			}
			//This function is ActionListener for DeleteAContact button.
			*function updat(){
				//open new window wich has all contacts with check box for each and the one selected will be sent as request to server and the server return the window which has the empty text fields info to be filled and saved by the client.				
			}
			//This function is ActionListener for updateAContact button.



	