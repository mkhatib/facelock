import java.sql.*;
import java.util.*;
/**
 * Model to interact with the Contact Table from the database
 *
 * @author Mohammad Khatib &lt;&gt;
 * @version $Rev$
 */
public final class ContactModel extends FaceLockModel{
	
	// Store the contact information
	private static Contact contact;
	// Flag to check whether the object has been changed
	private boolean changed=false;
	// Flag to check whether the object is already saved in the database or not
	private boolean isNew=false;
	// For whose this contact belong to any user?
	private int userID = 0;
	
	// Constructors
	// {{{ ContactModel constructor
    /**
     * This is the default constructor
     */
    public ContactModel() {
		// Call the FaceLockModel constructor to initialize the connection of the database
        super();
    }
	
	// Constructors for NEW Contacts
    public ContactModel(Contact contact) {
        this();
		this.contact = contact;
		this.isNew = true;
    }
	// Constructor for a new contact that it's User parent is known
	public ContactModel(Contact contact, int pid) {
        this(contact);
		userID = pid;
    }
	// }}}
	
	// Getters
	/**
	 * getContact
	 *
	 * @param  
	 * @return Contact
	 */
	public Contact getContact( ) {
		return contact;
	}

	// Setters
	/**
	 * setContact
	 *
	 * @param contact
	 * @return 
	 */
	public void setContact(Contact  contact) {
		this.contact = contact;
	}
	/**
	 * setUserID
	 *
	 * @param id 
	 * @return 
	 */
	public void setUserID(int  id) {
		this.userID = id;
	}
	
	// Methods
	/**
	 * findById
	 *
	 * @param  id
	 * @return Contact
	 */
	public static ContactModel findById(int id){
		// Initialize the Connection
		ContactModel c = new ContactModel();
		try {
			Statement s = connection.createStatement();
			// ResultSet r = s.executeQuery("select C.*,CO.name,Ci.name,T.name, A.street from Contact C,Address A, Country CO, City Ci, Town T where A.id=C.location and A.town_id=T.id and T.city_id=Ci.id and Ci.country_id=Co.id and C.id="+id);
			ResultSet r = s.executeQuery("select C.* from Contact C where C.id="+id);
			// If there's such a Contact
			if(r.next())
			{
				//Address add = new Address(r.getString(10),r.getString(11),r.getString(12),r.getString(13));
				//contact =  (new Contact(id,r.getString("firstname"), r.getString("middlename"), r.getString("lastname"), r.getInt("sex"), r.getDate("birthday"), add,r.getInt("status")));
				contact =  new Contact(id,r.getString("firstname"), r.getString("middlename"), r.getString("lastname"), r.getString("Phone"), r.getString("Address"), r.getString("Email"),r.getInt("Icon"));
				c.setContact(contact);
				c.setUserID(r.getInt("user_id"));
				return (c);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * delete
	 *
	 * @param  
	 * @return boolean
	 */
	public boolean delete() {
		// if there is no contact or the contact is not yet saved to the database then return false
		if(contact == null || contact.getID() == 0) return false;
		// Else get the contact ID
		int id = contact.getID();
		try {
			Statement s = connection.createStatement();
			// Delete it
			int result = s.executeUpdate("delete from Contact where id="+ id);
			// If deleted Successfully return true
			if(result >0) return true;
		} catch (Exception e) {
			e.printStackTrace();	
		}
		return false;
	}
	
	/**
	 * save
	 *
	 * @param  
	 * @return boolean
	 */
	public boolean save() {
		// if there is no contact then return false
		if(contact == null) return false;
		// If the object is not new, and it's already saved to the database, then call update instead of save
		if(!isNew) return update();
		try {
			Statement s = connection.createStatement();
			int status = s.executeUpdate("insert into Contact(firstname, middlename, lastname, Phone, Address, Email, icon, user_id) values ('"+contact.getFirstName()+"','"+contact.getMiddleName()+"','"+contact.getLastName()+"','"+contact.getPhone()+"','"+contact.getAddress()+"','"+contact.getEmail()+"','"+contact.getIcon()+"','"+userID+"')");
			if(status > 0) 
			{
				// It's not a new object any more, it has been saved to the database
				isNew = false;
				// Get the ID that it has been stored inside the database (Auto Generated by the DB)
				ResultSet r = s.executeQuery("select id from Contact where user_id="+userID+" Order by id DESC Limit 1");
				if(r.next()){
					// Store the ID in the contact object
					contact.setID(r.getInt("id"));
				}
				return true;
			}
			else return false;
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return false;
	}

	/**
	 * update
	 *
	 * @param  
	 * @return 
	 */
	public boolean update() {
		// if there is no contact then return false
		if(contact == null) return false;
		// If the object is new then call save instead of update
		if(isNew) return save();
		try {
			Statement s = connection.createStatement();
			int status = s.executeUpdate("Update Contact set firstname='"+contact.getFirstName()+"', middlename='"+contact.getMiddleName()+"', lastname='"+contact.getLastName()+"', Phone='"+contact.getPhone()+"', Address='"+contact.getAddress()+"', Email='"+contact.getEmail()+"', icon="+contact.getIcon()+", user_id="+userID+" where id="+contact.getID());
			if(status > 0) return true;
			else return false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// Setters And Getters
	/**
	 * getID
	 *
	 * @param  
	 * @return int
	 */
	public int getID() {
		if(contact == null) return 0;
		return contact.getID();
	}
	/**
	 * getFirstName
	 *
	 * @param  
	 * @return String
	 */
	public String getFirstName() {
		if(contact == null) return null;
		return contact.getFirstName();
	}
	/**
	 * getMiddleName
	 *
	 * @param  
	 * @return String
	 */
	public String getMiddleName() {
		if(contact == null) return null;
		return contact.getMiddleName();
	}
	/**
	 * getLastName
	 *
	 * @param  
	 * @return String
	 */
	public String getLastName() {
		if(contact == null) return null;
		return contact.getLastName();
	}
	
	/**
	 * setPhone
	 *
	 * @param phone 
	 * @return 
	 */
	public void setPhone(String phone) {
		if(contact == null) return;
		contact.setPhone(phone);
	}

	/**
	 * setAddress
	 *
	 * @param address 
	 * @return 
	 */
	public void setAddress(String address) {
		if(contact == null) return;
		contact.setAddress(address);
	}

	/**
	 * setEmail
	 *
	 * @param email 
	 * @return 
	 */
	public void setEmail(String email) {
		if(contact == null) return;
		contact.setEmail(email);
	}

	/**
	 * getIcon
	 *
	 * @param  
	 * @return int
	 */
	public int getIcon() {
		if(contact == null) return 0;
		return contact.getIcon();
	}

	// Setters
	/**
	 * setID
	 *
	 * @param  int
	 * @return 
	 */
	public void setID(int id) {
		if(contact == null) return;
		changed = true;
		contact.setID(id);
	}
	/**
	 * setFirstName
	 *
	 * @param  String
	 * @return 
	 */
	public void setFirstName(String fname) {
		if(contact == null) return;
		changed = true;
	 	contact.setFirstName(fname);
	}
	/**
	 * setMiddleName
	 *
	 * @param  String
	 * @return 
	 */
	public void setMiddleName(String mname) {
		if(contact == null) return;
		changed = true;
		contact.setMiddleName(mname);
	}
	/**
	 * setLastName
	 *
	 * @param  String
	 * @return 
	 */
	public void setLastName(String lname) {
		if(contact == null) return;
		changed = true;
	 	contact.setLastName(lname);
	}
	/**
	 * setIcon
	 *
	 * @param  int
	 * @return 
	 */
	public void setIcon(int icon) {
		if(contact == null) return;
		changed = true;
		contact.setIcon(icon);
	}
}
